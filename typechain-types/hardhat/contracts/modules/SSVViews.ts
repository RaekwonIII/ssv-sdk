/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISSVNetworkCore {
  export type ClusterStruct = {
    validatorCount: BigNumberish;
    networkFeeIndex: BigNumberish;
    index: BigNumberish;
    active: boolean;
    balance: BigNumberish;
  };

  export type ClusterStructOutput = [
    validatorCount: bigint,
    networkFeeIndex: bigint,
    index: bigint,
    active: boolean,
    balance: bigint
  ] & {
    validatorCount: bigint;
    networkFeeIndex: bigint;
    index: bigint;
    active: boolean;
    balance: bigint;
  };
}

export interface SSVViewsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "getBalance"
      | "getBurnRate"
      | "getLiquidationThresholdPeriod"
      | "getMaximumOperatorFee"
      | "getMinimumLiquidationCollateral"
      | "getNetworkEarnings"
      | "getNetworkFee"
      | "getNetworkValidatorsCount"
      | "getOperatorById"
      | "getOperatorDeclaredFee"
      | "getOperatorEarnings"
      | "getOperatorFee"
      | "getOperatorFeeIncreaseLimit"
      | "getOperatorFeePeriods"
      | "getValidator"
      | "getValidatorsPerOperatorLimit"
      | "getVersion"
      | "getWhitelistedOperators"
      | "isAddressWhitelistedInWhitelistingContract"
      | "isLiquidatable"
      | "isLiquidated"
      | "isWhitelistingContract"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnRate",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationThresholdPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumOperatorFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumLiquidationCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkValidatorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorDeclaredFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorFeeIncreaseLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorFeePeriods",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidator",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsPerOperatorLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedOperators",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressWhitelistedInWhitelistingContract",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidated",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistingContract",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBurnRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationThresholdPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumLiquidationCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkValidatorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorDeclaredFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorFeeIncreaseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorFeePeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsPerOperatorLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isAddressWhitelistedInWhitelistingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistingContract",
    data: BytesLike
  ): Result;
}

export interface SSVViews extends BaseContract {
  connect(runner?: ContractRunner | null): SSVViews;
  waitForDeployment(): Promise<this>;

  interface: SSVViewsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getBalance: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [bigint],
    "view"
  >;

  getBurnRate: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [bigint],
    "view"
  >;

  getLiquidationThresholdPeriod: TypedContractMethod<[], [bigint], "view">;

  getMaximumOperatorFee: TypedContractMethod<[], [bigint], "view">;

  getMinimumLiquidationCollateral: TypedContractMethod<[], [bigint], "view">;

  getNetworkEarnings: TypedContractMethod<[], [bigint], "view">;

  getNetworkFee: TypedContractMethod<[], [bigint], "view">;

  getNetworkValidatorsCount: TypedContractMethod<[], [bigint], "view">;

  getOperatorById: TypedContractMethod<
    [operatorId: BigNumberish],
    [
      [string, bigint, bigint, string, boolean, boolean] & {
        owner: string;
        fee: bigint;
        validatorCount: bigint;
        whitelistedAddress: string;
        isPrivate: boolean;
        isActive: boolean;
      }
    ],
    "view"
  >;

  getOperatorDeclaredFee: TypedContractMethod<
    [operatorId: BigNumberish],
    [[boolean, bigint, bigint, bigint]],
    "view"
  >;

  getOperatorEarnings: TypedContractMethod<
    [id: BigNumberish],
    [bigint],
    "view"
  >;

  getOperatorFee: TypedContractMethod<
    [operatorId: BigNumberish],
    [bigint],
    "view"
  >;

  getOperatorFeeIncreaseLimit: TypedContractMethod<[], [bigint], "view">;

  getOperatorFeePeriods: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getValidator: TypedContractMethod<
    [clusterOwner: AddressLike, publicKey: BytesLike],
    [boolean],
    "view"
  >;

  getValidatorsPerOperatorLimit: TypedContractMethod<[], [bigint], "view">;

  getVersion: TypedContractMethod<[], [string], "view">;

  getWhitelistedOperators: TypedContractMethod<
    [operatorIds: BigNumberish[], addressToCheck: AddressLike],
    [bigint[]],
    "view"
  >;

  isAddressWhitelistedInWhitelistingContract: TypedContractMethod<
    [
      addressToCheck: AddressLike,
      operatorId: BigNumberish,
      whitelistingContract: AddressLike
    ],
    [boolean],
    "view"
  >;

  isLiquidatable: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [boolean],
    "view"
  >;

  isLiquidated: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [boolean],
    "view"
  >;

  isWhitelistingContract: TypedContractMethod<
    [contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBurnRate"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidationThresholdPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaximumOperatorFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumLiquidationCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNetworkEarnings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNetworkFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNetworkValidatorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorById"
  ): TypedContractMethod<
    [operatorId: BigNumberish],
    [
      [string, bigint, bigint, string, boolean, boolean] & {
        owner: string;
        fee: bigint;
        validatorCount: bigint;
        whitelistedAddress: string;
        isPrivate: boolean;
        isActive: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperatorDeclaredFee"
  ): TypedContractMethod<
    [operatorId: BigNumberish],
    [[boolean, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperatorEarnings"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorFee"
  ): TypedContractMethod<[operatorId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorFeeIncreaseLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorFeePeriods"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getValidator"
  ): TypedContractMethod<
    [clusterOwner: AddressLike, publicKey: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorsPerOperatorLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedOperators"
  ): TypedContractMethod<
    [operatorIds: BigNumberish[], addressToCheck: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isAddressWhitelistedInWhitelistingContract"
  ): TypedContractMethod<
    [
      addressToCheck: AddressLike,
      operatorId: BigNumberish,
      whitelistingContract: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLiquidatable"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLiquidated"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWhitelistingContract"
  ): TypedContractMethod<[contractAddress: AddressLike], [boolean], "view">;

  filters: {};
}
