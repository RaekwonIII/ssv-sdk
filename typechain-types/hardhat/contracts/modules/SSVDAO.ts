/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export interface SSVDAOInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "updateDeclareOperatorFeePeriod"
      | "updateExecuteOperatorFeePeriod"
      | "updateLiquidationThresholdPeriod"
      | "updateMaximumOperatorFee"
      | "updateMinimumLiquidationCollateral"
      | "updateNetworkFee"
      | "updateOperatorFeeIncreaseLimit"
      | "withdrawNetworkEarnings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DeclareOperatorFeePeriodUpdated"
      | "ExecuteOperatorFeePeriodUpdated"
      | "LiquidationThresholdPeriodUpdated"
      | "MinimumLiquidationCollateralUpdated"
      | "NetworkEarningsWithdrawn"
      | "NetworkFeeUpdated"
      | "OperatorFeeIncreaseLimitUpdated"
      | "OperatorMaximumFeeUpdated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "updateDeclareOperatorFeePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecuteOperatorFeePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidationThresholdPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumOperatorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumLiquidationCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperatorFeeIncreaseLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNetworkEarnings",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "updateDeclareOperatorFeePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecuteOperatorFeePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidationThresholdPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumLiquidationCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperatorFeeIncreaseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNetworkEarnings",
    data: BytesLike
  ): Result;
}

export namespace DeclareOperatorFeePeriodUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteOperatorFeePeriodUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationThresholdPeriodUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinimumLiquidationCollateralUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NetworkEarningsWithdrawnEvent {
  export type InputTuple = [value: BigNumberish, recipient: AddressLike];
  export type OutputTuple = [value: bigint, recipient: string];
  export interface OutputObject {
    value: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NetworkFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorFeeIncreaseLimitUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorMaximumFeeUpdatedEvent {
  export type InputTuple = [maxFee: BigNumberish];
  export type OutputTuple = [maxFee: bigint];
  export interface OutputObject {
    maxFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SSVDAO extends BaseContract {
  connect(runner?: ContractRunner | null): SSVDAO;
  waitForDeployment(): Promise<this>;

  interface: SSVDAOInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  updateDeclareOperatorFeePeriod: TypedContractMethod<
    [timeInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateExecuteOperatorFeePeriod: TypedContractMethod<
    [timeInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateLiquidationThresholdPeriod: TypedContractMethod<
    [blocks: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaximumOperatorFee: TypedContractMethod<
    [maxFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinimumLiquidationCollateral: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateNetworkFee: TypedContractMethod<
    [fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOperatorFeeIncreaseLimit: TypedContractMethod<
    [percentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawNetworkEarnings: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "updateDeclareOperatorFeePeriod"
  ): TypedContractMethod<[timeInSeconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateExecuteOperatorFeePeriod"
  ): TypedContractMethod<[timeInSeconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLiquidationThresholdPeriod"
  ): TypedContractMethod<[blocks: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaximumOperatorFee"
  ): TypedContractMethod<[maxFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinimumLiquidationCollateral"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateNetworkFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOperatorFeeIncreaseLimit"
  ): TypedContractMethod<[percentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawNetworkEarnings"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "DeclareOperatorFeePeriodUpdated"
  ): TypedContractEvent<
    DeclareOperatorFeePeriodUpdatedEvent.InputTuple,
    DeclareOperatorFeePeriodUpdatedEvent.OutputTuple,
    DeclareOperatorFeePeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteOperatorFeePeriodUpdated"
  ): TypedContractEvent<
    ExecuteOperatorFeePeriodUpdatedEvent.InputTuple,
    ExecuteOperatorFeePeriodUpdatedEvent.OutputTuple,
    ExecuteOperatorFeePeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationThresholdPeriodUpdated"
  ): TypedContractEvent<
    LiquidationThresholdPeriodUpdatedEvent.InputTuple,
    LiquidationThresholdPeriodUpdatedEvent.OutputTuple,
    LiquidationThresholdPeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinimumLiquidationCollateralUpdated"
  ): TypedContractEvent<
    MinimumLiquidationCollateralUpdatedEvent.InputTuple,
    MinimumLiquidationCollateralUpdatedEvent.OutputTuple,
    MinimumLiquidationCollateralUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "NetworkEarningsWithdrawn"
  ): TypedContractEvent<
    NetworkEarningsWithdrawnEvent.InputTuple,
    NetworkEarningsWithdrawnEvent.OutputTuple,
    NetworkEarningsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "NetworkFeeUpdated"
  ): TypedContractEvent<
    NetworkFeeUpdatedEvent.InputTuple,
    NetworkFeeUpdatedEvent.OutputTuple,
    NetworkFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorFeeIncreaseLimitUpdated"
  ): TypedContractEvent<
    OperatorFeeIncreaseLimitUpdatedEvent.InputTuple,
    OperatorFeeIncreaseLimitUpdatedEvent.OutputTuple,
    OperatorFeeIncreaseLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorMaximumFeeUpdated"
  ): TypedContractEvent<
    OperatorMaximumFeeUpdatedEvent.InputTuple,
    OperatorMaximumFeeUpdatedEvent.OutputTuple,
    OperatorMaximumFeeUpdatedEvent.OutputObject
  >;

  filters: {
    "DeclareOperatorFeePeriodUpdated(uint64)": TypedContractEvent<
      DeclareOperatorFeePeriodUpdatedEvent.InputTuple,
      DeclareOperatorFeePeriodUpdatedEvent.OutputTuple,
      DeclareOperatorFeePeriodUpdatedEvent.OutputObject
    >;
    DeclareOperatorFeePeriodUpdated: TypedContractEvent<
      DeclareOperatorFeePeriodUpdatedEvent.InputTuple,
      DeclareOperatorFeePeriodUpdatedEvent.OutputTuple,
      DeclareOperatorFeePeriodUpdatedEvent.OutputObject
    >;

    "ExecuteOperatorFeePeriodUpdated(uint64)": TypedContractEvent<
      ExecuteOperatorFeePeriodUpdatedEvent.InputTuple,
      ExecuteOperatorFeePeriodUpdatedEvent.OutputTuple,
      ExecuteOperatorFeePeriodUpdatedEvent.OutputObject
    >;
    ExecuteOperatorFeePeriodUpdated: TypedContractEvent<
      ExecuteOperatorFeePeriodUpdatedEvent.InputTuple,
      ExecuteOperatorFeePeriodUpdatedEvent.OutputTuple,
      ExecuteOperatorFeePeriodUpdatedEvent.OutputObject
    >;

    "LiquidationThresholdPeriodUpdated(uint64)": TypedContractEvent<
      LiquidationThresholdPeriodUpdatedEvent.InputTuple,
      LiquidationThresholdPeriodUpdatedEvent.OutputTuple,
      LiquidationThresholdPeriodUpdatedEvent.OutputObject
    >;
    LiquidationThresholdPeriodUpdated: TypedContractEvent<
      LiquidationThresholdPeriodUpdatedEvent.InputTuple,
      LiquidationThresholdPeriodUpdatedEvent.OutputTuple,
      LiquidationThresholdPeriodUpdatedEvent.OutputObject
    >;

    "MinimumLiquidationCollateralUpdated(uint256)": TypedContractEvent<
      MinimumLiquidationCollateralUpdatedEvent.InputTuple,
      MinimumLiquidationCollateralUpdatedEvent.OutputTuple,
      MinimumLiquidationCollateralUpdatedEvent.OutputObject
    >;
    MinimumLiquidationCollateralUpdated: TypedContractEvent<
      MinimumLiquidationCollateralUpdatedEvent.InputTuple,
      MinimumLiquidationCollateralUpdatedEvent.OutputTuple,
      MinimumLiquidationCollateralUpdatedEvent.OutputObject
    >;

    "NetworkEarningsWithdrawn(uint256,address)": TypedContractEvent<
      NetworkEarningsWithdrawnEvent.InputTuple,
      NetworkEarningsWithdrawnEvent.OutputTuple,
      NetworkEarningsWithdrawnEvent.OutputObject
    >;
    NetworkEarningsWithdrawn: TypedContractEvent<
      NetworkEarningsWithdrawnEvent.InputTuple,
      NetworkEarningsWithdrawnEvent.OutputTuple,
      NetworkEarningsWithdrawnEvent.OutputObject
    >;

    "NetworkFeeUpdated(uint256,uint256)": TypedContractEvent<
      NetworkFeeUpdatedEvent.InputTuple,
      NetworkFeeUpdatedEvent.OutputTuple,
      NetworkFeeUpdatedEvent.OutputObject
    >;
    NetworkFeeUpdated: TypedContractEvent<
      NetworkFeeUpdatedEvent.InputTuple,
      NetworkFeeUpdatedEvent.OutputTuple,
      NetworkFeeUpdatedEvent.OutputObject
    >;

    "OperatorFeeIncreaseLimitUpdated(uint64)": TypedContractEvent<
      OperatorFeeIncreaseLimitUpdatedEvent.InputTuple,
      OperatorFeeIncreaseLimitUpdatedEvent.OutputTuple,
      OperatorFeeIncreaseLimitUpdatedEvent.OutputObject
    >;
    OperatorFeeIncreaseLimitUpdated: TypedContractEvent<
      OperatorFeeIncreaseLimitUpdatedEvent.InputTuple,
      OperatorFeeIncreaseLimitUpdatedEvent.OutputTuple,
      OperatorFeeIncreaseLimitUpdatedEvent.OutputObject
    >;

    "OperatorMaximumFeeUpdated(uint64)": TypedContractEvent<
      OperatorMaximumFeeUpdatedEvent.InputTuple,
      OperatorMaximumFeeUpdatedEvent.OutputTuple,
      OperatorMaximumFeeUpdatedEvent.OutputObject
    >;
    OperatorMaximumFeeUpdated: TypedContractEvent<
      OperatorMaximumFeeUpdatedEvent.InputTuple,
      OperatorMaximumFeeUpdatedEvent.OutputTuple,
      OperatorMaximumFeeUpdatedEvent.OutputObject
    >;
  };
}
