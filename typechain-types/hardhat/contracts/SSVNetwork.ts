/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISSVNetworkCore {
  export type ClusterStruct = {
    validatorCount: BigNumberish;
    networkFeeIndex: BigNumberish;
    index: BigNumberish;
    active: boolean;
    balance: BigNumberish;
  };

  export type ClusterStructOutput = [
    validatorCount: bigint,
    networkFeeIndex: bigint,
    index: bigint,
    active: boolean,
    balance: bigint
  ] & {
    validatorCount: bigint;
    networkFeeIndex: bigint;
    index: bigint;
    active: boolean;
    balance: bigint;
  };
}

export interface SSVNetworkInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "bulkExitValidator"
      | "bulkRegisterValidator"
      | "bulkRemoveValidator"
      | "cancelDeclaredOperatorFee"
      | "declareOperatorFee"
      | "deposit"
      | "executeOperatorFee"
      | "exitValidator"
      | "getVersion"
      | "initialize"
      | "liquidate"
      | "owner"
      | "pendingOwner"
      | "proxiableUUID"
      | "reactivate"
      | "reduceOperatorFee"
      | "registerOperator"
      | "registerValidator"
      | "removeOperator"
      | "removeOperatorsWhitelistingContract"
      | "removeOperatorsWhitelists"
      | "removeValidator"
      | "renounceOwnership"
      | "setFeeRecipientAddress"
      | "setOperatorsPrivateUnchecked"
      | "setOperatorsPublicUnchecked"
      | "setOperatorsWhitelistingContract"
      | "setOperatorsWhitelists"
      | "transferOwnership"
      | "updateDeclareOperatorFeePeriod"
      | "updateExecuteOperatorFeePeriod"
      | "updateLiquidationThresholdPeriod"
      | "updateMaximumOperatorFee"
      | "updateMinimumLiquidationCollateral"
      | "updateModule"
      | "updateNetworkFee"
      | "updateOperatorFeeIncreaseLimit"
      | "upgradeTo"
      | "upgradeToAndCall"
      | "withdraw"
      | "withdrawAllOperatorEarnings"
      | "withdrawNetworkEarnings"
      | "withdrawOperatorEarnings"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "ClusterDeposited"
      | "ClusterLiquidated"
      | "ClusterReactivated"
      | "ClusterWithdrawn"
      | "DeclareOperatorFeePeriodUpdated"
      | "ExecuteOperatorFeePeriodUpdated"
      | "FeeRecipientAddressUpdated"
      | "Initialized"
      | "LiquidationThresholdPeriodUpdated"
      | "MinimumLiquidationCollateralUpdated"
      | "ModuleUpgraded"
      | "NetworkEarningsWithdrawn"
      | "NetworkFeeUpdated"
      | "OperatorAdded"
      | "OperatorFeeDeclarationCancelled"
      | "OperatorFeeDeclared"
      | "OperatorFeeExecuted"
      | "OperatorFeeIncreaseLimitUpdated"
      | "OperatorMaximumFeeUpdated"
      | "OperatorMultipleWhitelistRemoved"
      | "OperatorMultipleWhitelistUpdated"
      | "OperatorPrivacyStatusUpdated"
      | "OperatorRemoved"
      | "OperatorWhitelistingContractUpdated"
      | "OperatorWithdrawn"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Upgraded"
      | "ValidatorAdded"
      | "ValidatorExited"
      | "ValidatorRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "bulkExitValidator",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkRegisterValidator",
    values: [
      BytesLike[],
      BigNumberish[],
      BytesLike[],
      BigNumberish,
      ISSVNetworkCore.ClusterStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkRemoveValidator",
    values: [BytesLike[], BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelDeclaredOperatorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "declareOperatorFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish,
      ISSVNetworkCore.ClusterStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeOperatorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "exitValidator",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "reactivate",
    values: [BigNumberish[], BigNumberish, ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "reduceOperatorFee",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "registerOperator",
    values: [BytesLike, BigNumberish, boolean]
  ): string;
  encodeFunctionData(
    functionFragment: "registerValidator",
    values: [
      BytesLike,
      BigNumberish[],
      BytesLike,
      BigNumberish,
      ISSVNetworkCore.ClusterStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperator",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperatorsWhitelistingContract",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOperatorsWhitelists",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [BytesLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeRecipientAddress",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorsPrivateUnchecked",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorsPublicUnchecked",
    values: [BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorsWhitelistingContract",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setOperatorsWhitelists",
    values: [BigNumberish[], AddressLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateDeclareOperatorFeePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateExecuteOperatorFeePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateLiquidationThresholdPeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMaximumOperatorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateMinimumLiquidationCollateral",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateModule",
    values: [BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateNetworkFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "updateOperatorFeeIncreaseLimit",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish[], BigNumberish, ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawAllOperatorEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawNetworkEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawOperatorEarnings",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkExitValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkRegisterValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkRemoveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelDeclaredOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "declareOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "exitValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "reactivate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "reduceOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperatorsWhitelistingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOperatorsWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeRecipientAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorsPrivateUnchecked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorsPublicUnchecked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorsWhitelistingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setOperatorsWhitelists",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateDeclareOperatorFeePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateExecuteOperatorFeePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateLiquidationThresholdPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMaximumOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateMinimumLiquidationCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateNetworkFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateOperatorFeeIncreaseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllOperatorEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawNetworkEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawOperatorEarnings",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterDepositedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    value: BigNumberish,
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    value: bigint,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    value: bigint;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterLiquidatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterReactivatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterWithdrawnEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    value: BigNumberish,
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    value: bigint,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    value: bigint;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DeclareOperatorFeePeriodUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ExecuteOperatorFeePeriodUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace FeeRecipientAddressUpdatedEvent {
  export type InputTuple = [owner: AddressLike, recipientAddress: AddressLike];
  export type OutputTuple = [owner: string, recipientAddress: string];
  export interface OutputObject {
    owner: string;
    recipientAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LiquidationThresholdPeriodUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace MinimumLiquidationCollateralUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ModuleUpgradedEvent {
  export type InputTuple = [moduleId: BigNumberish, moduleAddress: AddressLike];
  export type OutputTuple = [moduleId: bigint, moduleAddress: string];
  export interface OutputObject {
    moduleId: bigint;
    moduleAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NetworkEarningsWithdrawnEvent {
  export type InputTuple = [value: BigNumberish, recipient: AddressLike];
  export type OutputTuple = [value: bigint, recipient: string];
  export interface OutputObject {
    value: bigint;
    recipient: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace NetworkFeeUpdatedEvent {
  export type InputTuple = [oldFee: BigNumberish, newFee: BigNumberish];
  export type OutputTuple = [oldFee: bigint, newFee: bigint];
  export interface OutputObject {
    oldFee: bigint;
    newFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorAddedEvent {
  export type InputTuple = [
    operatorId: BigNumberish,
    owner: AddressLike,
    publicKey: BytesLike,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    operatorId: bigint,
    owner: string,
    publicKey: string,
    fee: bigint
  ];
  export interface OutputObject {
    operatorId: bigint;
    owner: string;
    publicKey: string;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorFeeDeclarationCancelledEvent {
  export type InputTuple = [owner: AddressLike, operatorId: BigNumberish];
  export type OutputTuple = [owner: string, operatorId: bigint];
  export interface OutputObject {
    owner: string;
    operatorId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorFeeDeclaredEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorId: BigNumberish,
    blockNumber: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    operatorId: bigint,
    blockNumber: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    owner: string;
    operatorId: bigint;
    blockNumber: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorFeeExecutedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorId: BigNumberish,
    blockNumber: BigNumberish,
    fee: BigNumberish
  ];
  export type OutputTuple = [
    owner: string,
    operatorId: bigint,
    blockNumber: bigint,
    fee: bigint
  ];
  export interface OutputObject {
    owner: string;
    operatorId: bigint;
    blockNumber: bigint;
    fee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorFeeIncreaseLimitUpdatedEvent {
  export type InputTuple = [value: BigNumberish];
  export type OutputTuple = [value: bigint];
  export interface OutputObject {
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorMaximumFeeUpdatedEvent {
  export type InputTuple = [maxFee: BigNumberish];
  export type OutputTuple = [maxFee: bigint];
  export interface OutputObject {
    maxFee: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorMultipleWhitelistRemovedEvent {
  export type InputTuple = [
    operatorIds: BigNumberish[],
    whitelistAddresses: AddressLike[]
  ];
  export type OutputTuple = [
    operatorIds: bigint[],
    whitelistAddresses: string[]
  ];
  export interface OutputObject {
    operatorIds: bigint[];
    whitelistAddresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorMultipleWhitelistUpdatedEvent {
  export type InputTuple = [
    operatorIds: BigNumberish[],
    whitelistAddresses: AddressLike[]
  ];
  export type OutputTuple = [
    operatorIds: bigint[],
    whitelistAddresses: string[]
  ];
  export interface OutputObject {
    operatorIds: bigint[];
    whitelistAddresses: string[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorPrivacyStatusUpdatedEvent {
  export type InputTuple = [operatorIds: BigNumberish[], toPrivate: boolean];
  export type OutputTuple = [operatorIds: bigint[], toPrivate: boolean];
  export interface OutputObject {
    operatorIds: bigint[];
    toPrivate: boolean;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorRemovedEvent {
  export type InputTuple = [operatorId: BigNumberish];
  export type OutputTuple = [operatorId: bigint];
  export interface OutputObject {
    operatorId: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorWhitelistingContractUpdatedEvent {
  export type InputTuple = [
    operatorIds: BigNumberish[],
    whitelistingContract: AddressLike
  ];
  export type OutputTuple = [
    operatorIds: bigint[],
    whitelistingContract: string
  ];
  export interface OutputObject {
    operatorIds: bigint[];
    whitelistingContract: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OperatorWithdrawnEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorId: BigNumberish,
    value: BigNumberish
  ];
  export type OutputTuple = [owner: string, operatorId: bigint, value: bigint];
  export interface OutputObject {
    owner: string;
    operatorId: bigint;
    value: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorAddedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    publicKey: BytesLike,
    shares: BytesLike,
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    publicKey: string,
    shares: string,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    publicKey: string;
    shares: string;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorExitedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    publicKey: BytesLike
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    publicKey: string
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    publicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRemovedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    publicKey: BytesLike,
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    publicKey: string,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    publicKey: string;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SSVNetwork extends BaseContract {
  connect(runner?: ContractRunner | null): SSVNetwork;
  waitForDeployment(): Promise<this>;

  interface: SSVNetworkInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  bulkExitValidator: TypedContractMethod<
    [publicKeys: BytesLike[], operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  bulkRegisterValidator: TypedContractMethod<
    [
      publicKeys: BytesLike[],
      operatorIds: BigNumberish[],
      sharesData: BytesLike[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  bulkRemoveValidator: TypedContractMethod<
    [
      publicKeys: BytesLike[],
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  cancelDeclaredOperatorFee: TypedContractMethod<
    [operatorId: BigNumberish],
    [void],
    "nonpayable"
  >;

  declareOperatorFee: TypedContractMethod<
    [operatorId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  executeOperatorFee: TypedContractMethod<
    [operatorId: BigNumberish],
    [void],
    "nonpayable"
  >;

  exitValidator: TypedContractMethod<
    [publicKey: BytesLike, operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  getVersion: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [
      token_: AddressLike,
      ssvOperators_: AddressLike,
      ssvClusters_: AddressLike,
      ssvDAO_: AddressLike,
      ssvViews_: AddressLike,
      minimumBlocksBeforeLiquidation_: BigNumberish,
      minimumLiquidationCollateral_: BigNumberish,
      validatorsPerOperatorLimit_: BigNumberish,
      declareOperatorFeePeriod_: BigNumberish,
      executeOperatorFeePeriod_: BigNumberish,
      operatorMaxFeeIncrease_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  liquidate: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  reactivate: TypedContractMethod<
    [
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  reduceOperatorFee: TypedContractMethod<
    [operatorId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  registerOperator: TypedContractMethod<
    [publicKey: BytesLike, fee: BigNumberish, setPrivate: boolean],
    [bigint],
    "nonpayable"
  >;

  registerValidator: TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      sharesData: BytesLike,
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  removeOperator: TypedContractMethod<
    [operatorId: BigNumberish],
    [void],
    "nonpayable"
  >;

  removeOperatorsWhitelistingContract: TypedContractMethod<
    [operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  removeOperatorsWhitelists: TypedContractMethod<
    [operatorIds: BigNumberish[], whitelistAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  removeValidator: TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  setFeeRecipientAddress: TypedContractMethod<
    [recipientAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setOperatorsPrivateUnchecked: TypedContractMethod<
    [operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setOperatorsPublicUnchecked: TypedContractMethod<
    [operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  setOperatorsWhitelistingContract: TypedContractMethod<
    [operatorIds: BigNumberish[], whitelistingContract: AddressLike],
    [void],
    "nonpayable"
  >;

  setOperatorsWhitelists: TypedContractMethod<
    [operatorIds: BigNumberish[], whitelistAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  updateDeclareOperatorFeePeriod: TypedContractMethod<
    [timeInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateExecuteOperatorFeePeriod: TypedContractMethod<
    [timeInSeconds: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateLiquidationThresholdPeriod: TypedContractMethod<
    [blocks: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMaximumOperatorFee: TypedContractMethod<
    [maxFee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateMinimumLiquidationCollateral: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateModule: TypedContractMethod<
    [moduleId: BigNumberish, moduleAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  updateNetworkFee: TypedContractMethod<
    [fee: BigNumberish],
    [void],
    "nonpayable"
  >;

  updateOperatorFeeIncreaseLimit: TypedContractMethod<
    [percentage: BigNumberish],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  withdraw: TypedContractMethod<
    [
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  withdrawAllOperatorEarnings: TypedContractMethod<
    [operatorId: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawNetworkEarnings: TypedContractMethod<
    [amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  withdrawOperatorEarnings: TypedContractMethod<
    [operatorId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "bulkExitValidator"
  ): TypedContractMethod<
    [publicKeys: BytesLike[], operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bulkRegisterValidator"
  ): TypedContractMethod<
    [
      publicKeys: BytesLike[],
      operatorIds: BigNumberish[],
      sharesData: BytesLike[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bulkRemoveValidator"
  ): TypedContractMethod<
    [
      publicKeys: BytesLike[],
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "cancelDeclaredOperatorFee"
  ): TypedContractMethod<[operatorId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "declareOperatorFee"
  ): TypedContractMethod<
    [operatorId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeOperatorFee"
  ): TypedContractMethod<[operatorId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "exitValidator"
  ): TypedContractMethod<
    [publicKey: BytesLike, operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [
      token_: AddressLike,
      ssvOperators_: AddressLike,
      ssvClusters_: AddressLike,
      ssvDAO_: AddressLike,
      ssvViews_: AddressLike,
      minimumBlocksBeforeLiquidation_: BigNumberish,
      minimumLiquidationCollateral_: BigNumberish,
      validatorsPerOperatorLimit_: BigNumberish,
      declareOperatorFeePeriod_: BigNumberish,
      executeOperatorFeePeriod_: BigNumberish,
      operatorMaxFeeIncrease_: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "reactivate"
  ): TypedContractMethod<
    [
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reduceOperatorFee"
  ): TypedContractMethod<
    [operatorId: BigNumberish, fee: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerOperator"
  ): TypedContractMethod<
    [publicKey: BytesLike, fee: BigNumberish, setPrivate: boolean],
    [bigint],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerValidator"
  ): TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      sharesData: BytesLike,
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeOperator"
  ): TypedContractMethod<[operatorId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOperatorsWhitelistingContract"
  ): TypedContractMethod<[operatorIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "removeOperatorsWhitelists"
  ): TypedContractMethod<
    [operatorIds: BigNumberish[], whitelistAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setFeeRecipientAddress"
  ): TypedContractMethod<[recipientAddress: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperatorsPrivateUnchecked"
  ): TypedContractMethod<[operatorIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperatorsPublicUnchecked"
  ): TypedContractMethod<[operatorIds: BigNumberish[]], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setOperatorsWhitelistingContract"
  ): TypedContractMethod<
    [operatorIds: BigNumberish[], whitelistingContract: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setOperatorsWhitelists"
  ): TypedContractMethod<
    [operatorIds: BigNumberish[], whitelistAddresses: AddressLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateDeclareOperatorFeePeriod"
  ): TypedContractMethod<[timeInSeconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateExecuteOperatorFeePeriod"
  ): TypedContractMethod<[timeInSeconds: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateLiquidationThresholdPeriod"
  ): TypedContractMethod<[blocks: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMaximumOperatorFee"
  ): TypedContractMethod<[maxFee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateMinimumLiquidationCollateral"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateModule"
  ): TypedContractMethod<
    [moduleId: BigNumberish, moduleAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "updateNetworkFee"
  ): TypedContractMethod<[fee: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "updateOperatorFeeIncreaseLimit"
  ): TypedContractMethod<[percentage: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdrawAllOperatorEarnings"
  ): TypedContractMethod<[operatorId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawNetworkEarnings"
  ): TypedContractMethod<[amount: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "withdrawOperatorEarnings"
  ): TypedContractMethod<
    [operatorId: BigNumberish, amount: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterDeposited"
  ): TypedContractEvent<
    ClusterDepositedEvent.InputTuple,
    ClusterDepositedEvent.OutputTuple,
    ClusterDepositedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterLiquidated"
  ): TypedContractEvent<
    ClusterLiquidatedEvent.InputTuple,
    ClusterLiquidatedEvent.OutputTuple,
    ClusterLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterReactivated"
  ): TypedContractEvent<
    ClusterReactivatedEvent.InputTuple,
    ClusterReactivatedEvent.OutputTuple,
    ClusterReactivatedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterWithdrawn"
  ): TypedContractEvent<
    ClusterWithdrawnEvent.InputTuple,
    ClusterWithdrawnEvent.OutputTuple,
    ClusterWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "DeclareOperatorFeePeriodUpdated"
  ): TypedContractEvent<
    DeclareOperatorFeePeriodUpdatedEvent.InputTuple,
    DeclareOperatorFeePeriodUpdatedEvent.OutputTuple,
    DeclareOperatorFeePeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ExecuteOperatorFeePeriodUpdated"
  ): TypedContractEvent<
    ExecuteOperatorFeePeriodUpdatedEvent.InputTuple,
    ExecuteOperatorFeePeriodUpdatedEvent.OutputTuple,
    ExecuteOperatorFeePeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "FeeRecipientAddressUpdated"
  ): TypedContractEvent<
    FeeRecipientAddressUpdatedEvent.InputTuple,
    FeeRecipientAddressUpdatedEvent.OutputTuple,
    FeeRecipientAddressUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "LiquidationThresholdPeriodUpdated"
  ): TypedContractEvent<
    LiquidationThresholdPeriodUpdatedEvent.InputTuple,
    LiquidationThresholdPeriodUpdatedEvent.OutputTuple,
    LiquidationThresholdPeriodUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "MinimumLiquidationCollateralUpdated"
  ): TypedContractEvent<
    MinimumLiquidationCollateralUpdatedEvent.InputTuple,
    MinimumLiquidationCollateralUpdatedEvent.OutputTuple,
    MinimumLiquidationCollateralUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "ModuleUpgraded"
  ): TypedContractEvent<
    ModuleUpgradedEvent.InputTuple,
    ModuleUpgradedEvent.OutputTuple,
    ModuleUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "NetworkEarningsWithdrawn"
  ): TypedContractEvent<
    NetworkEarningsWithdrawnEvent.InputTuple,
    NetworkEarningsWithdrawnEvent.OutputTuple,
    NetworkEarningsWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "NetworkFeeUpdated"
  ): TypedContractEvent<
    NetworkFeeUpdatedEvent.InputTuple,
    NetworkFeeUpdatedEvent.OutputTuple,
    NetworkFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorAdded"
  ): TypedContractEvent<
    OperatorAddedEvent.InputTuple,
    OperatorAddedEvent.OutputTuple,
    OperatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorFeeDeclarationCancelled"
  ): TypedContractEvent<
    OperatorFeeDeclarationCancelledEvent.InputTuple,
    OperatorFeeDeclarationCancelledEvent.OutputTuple,
    OperatorFeeDeclarationCancelledEvent.OutputObject
  >;
  getEvent(
    key: "OperatorFeeDeclared"
  ): TypedContractEvent<
    OperatorFeeDeclaredEvent.InputTuple,
    OperatorFeeDeclaredEvent.OutputTuple,
    OperatorFeeDeclaredEvent.OutputObject
  >;
  getEvent(
    key: "OperatorFeeExecuted"
  ): TypedContractEvent<
    OperatorFeeExecutedEvent.InputTuple,
    OperatorFeeExecutedEvent.OutputTuple,
    OperatorFeeExecutedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorFeeIncreaseLimitUpdated"
  ): TypedContractEvent<
    OperatorFeeIncreaseLimitUpdatedEvent.InputTuple,
    OperatorFeeIncreaseLimitUpdatedEvent.OutputTuple,
    OperatorFeeIncreaseLimitUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorMaximumFeeUpdated"
  ): TypedContractEvent<
    OperatorMaximumFeeUpdatedEvent.InputTuple,
    OperatorMaximumFeeUpdatedEvent.OutputTuple,
    OperatorMaximumFeeUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorMultipleWhitelistRemoved"
  ): TypedContractEvent<
    OperatorMultipleWhitelistRemovedEvent.InputTuple,
    OperatorMultipleWhitelistRemovedEvent.OutputTuple,
    OperatorMultipleWhitelistRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorMultipleWhitelistUpdated"
  ): TypedContractEvent<
    OperatorMultipleWhitelistUpdatedEvent.InputTuple,
    OperatorMultipleWhitelistUpdatedEvent.OutputTuple,
    OperatorMultipleWhitelistUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorPrivacyStatusUpdated"
  ): TypedContractEvent<
    OperatorPrivacyStatusUpdatedEvent.InputTuple,
    OperatorPrivacyStatusUpdatedEvent.OutputTuple,
    OperatorPrivacyStatusUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorRemoved"
  ): TypedContractEvent<
    OperatorRemovedEvent.InputTuple,
    OperatorRemovedEvent.OutputTuple,
    OperatorRemovedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorWhitelistingContractUpdated"
  ): TypedContractEvent<
    OperatorWhitelistingContractUpdatedEvent.InputTuple,
    OperatorWhitelistingContractUpdatedEvent.OutputTuple,
    OperatorWhitelistingContractUpdatedEvent.OutputObject
  >;
  getEvent(
    key: "OperatorWithdrawn"
  ): TypedContractEvent<
    OperatorWithdrawnEvent.InputTuple,
    OperatorWithdrawnEvent.OutputTuple,
    OperatorWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorAdded"
  ): TypedContractEvent<
    ValidatorAddedEvent.InputTuple,
    ValidatorAddedEvent.OutputTuple,
    ValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorExited"
  ): TypedContractEvent<
    ValidatorExitedEvent.InputTuple,
    ValidatorExitedEvent.OutputTuple,
    ValidatorExitedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRemoved"
  ): TypedContractEvent<
    ValidatorRemovedEvent.InputTuple,
    ValidatorRemovedEvent.OutputTuple,
    ValidatorRemovedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "ClusterDeposited(address,uint64[],uint256,tuple)": TypedContractEvent<
      ClusterDepositedEvent.InputTuple,
      ClusterDepositedEvent.OutputTuple,
      ClusterDepositedEvent.OutputObject
    >;
    ClusterDeposited: TypedContractEvent<
      ClusterDepositedEvent.InputTuple,
      ClusterDepositedEvent.OutputTuple,
      ClusterDepositedEvent.OutputObject
    >;

    "ClusterLiquidated(address,uint64[],tuple)": TypedContractEvent<
      ClusterLiquidatedEvent.InputTuple,
      ClusterLiquidatedEvent.OutputTuple,
      ClusterLiquidatedEvent.OutputObject
    >;
    ClusterLiquidated: TypedContractEvent<
      ClusterLiquidatedEvent.InputTuple,
      ClusterLiquidatedEvent.OutputTuple,
      ClusterLiquidatedEvent.OutputObject
    >;

    "ClusterReactivated(address,uint64[],tuple)": TypedContractEvent<
      ClusterReactivatedEvent.InputTuple,
      ClusterReactivatedEvent.OutputTuple,
      ClusterReactivatedEvent.OutputObject
    >;
    ClusterReactivated: TypedContractEvent<
      ClusterReactivatedEvent.InputTuple,
      ClusterReactivatedEvent.OutputTuple,
      ClusterReactivatedEvent.OutputObject
    >;

    "ClusterWithdrawn(address,uint64[],uint256,tuple)": TypedContractEvent<
      ClusterWithdrawnEvent.InputTuple,
      ClusterWithdrawnEvent.OutputTuple,
      ClusterWithdrawnEvent.OutputObject
    >;
    ClusterWithdrawn: TypedContractEvent<
      ClusterWithdrawnEvent.InputTuple,
      ClusterWithdrawnEvent.OutputTuple,
      ClusterWithdrawnEvent.OutputObject
    >;

    "DeclareOperatorFeePeriodUpdated(uint64)": TypedContractEvent<
      DeclareOperatorFeePeriodUpdatedEvent.InputTuple,
      DeclareOperatorFeePeriodUpdatedEvent.OutputTuple,
      DeclareOperatorFeePeriodUpdatedEvent.OutputObject
    >;
    DeclareOperatorFeePeriodUpdated: TypedContractEvent<
      DeclareOperatorFeePeriodUpdatedEvent.InputTuple,
      DeclareOperatorFeePeriodUpdatedEvent.OutputTuple,
      DeclareOperatorFeePeriodUpdatedEvent.OutputObject
    >;

    "ExecuteOperatorFeePeriodUpdated(uint64)": TypedContractEvent<
      ExecuteOperatorFeePeriodUpdatedEvent.InputTuple,
      ExecuteOperatorFeePeriodUpdatedEvent.OutputTuple,
      ExecuteOperatorFeePeriodUpdatedEvent.OutputObject
    >;
    ExecuteOperatorFeePeriodUpdated: TypedContractEvent<
      ExecuteOperatorFeePeriodUpdatedEvent.InputTuple,
      ExecuteOperatorFeePeriodUpdatedEvent.OutputTuple,
      ExecuteOperatorFeePeriodUpdatedEvent.OutputObject
    >;

    "FeeRecipientAddressUpdated(address,address)": TypedContractEvent<
      FeeRecipientAddressUpdatedEvent.InputTuple,
      FeeRecipientAddressUpdatedEvent.OutputTuple,
      FeeRecipientAddressUpdatedEvent.OutputObject
    >;
    FeeRecipientAddressUpdated: TypedContractEvent<
      FeeRecipientAddressUpdatedEvent.InputTuple,
      FeeRecipientAddressUpdatedEvent.OutputTuple,
      FeeRecipientAddressUpdatedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "LiquidationThresholdPeriodUpdated(uint64)": TypedContractEvent<
      LiquidationThresholdPeriodUpdatedEvent.InputTuple,
      LiquidationThresholdPeriodUpdatedEvent.OutputTuple,
      LiquidationThresholdPeriodUpdatedEvent.OutputObject
    >;
    LiquidationThresholdPeriodUpdated: TypedContractEvent<
      LiquidationThresholdPeriodUpdatedEvent.InputTuple,
      LiquidationThresholdPeriodUpdatedEvent.OutputTuple,
      LiquidationThresholdPeriodUpdatedEvent.OutputObject
    >;

    "MinimumLiquidationCollateralUpdated(uint256)": TypedContractEvent<
      MinimumLiquidationCollateralUpdatedEvent.InputTuple,
      MinimumLiquidationCollateralUpdatedEvent.OutputTuple,
      MinimumLiquidationCollateralUpdatedEvent.OutputObject
    >;
    MinimumLiquidationCollateralUpdated: TypedContractEvent<
      MinimumLiquidationCollateralUpdatedEvent.InputTuple,
      MinimumLiquidationCollateralUpdatedEvent.OutputTuple,
      MinimumLiquidationCollateralUpdatedEvent.OutputObject
    >;

    "ModuleUpgraded(uint8,address)": TypedContractEvent<
      ModuleUpgradedEvent.InputTuple,
      ModuleUpgradedEvent.OutputTuple,
      ModuleUpgradedEvent.OutputObject
    >;
    ModuleUpgraded: TypedContractEvent<
      ModuleUpgradedEvent.InputTuple,
      ModuleUpgradedEvent.OutputTuple,
      ModuleUpgradedEvent.OutputObject
    >;

    "NetworkEarningsWithdrawn(uint256,address)": TypedContractEvent<
      NetworkEarningsWithdrawnEvent.InputTuple,
      NetworkEarningsWithdrawnEvent.OutputTuple,
      NetworkEarningsWithdrawnEvent.OutputObject
    >;
    NetworkEarningsWithdrawn: TypedContractEvent<
      NetworkEarningsWithdrawnEvent.InputTuple,
      NetworkEarningsWithdrawnEvent.OutputTuple,
      NetworkEarningsWithdrawnEvent.OutputObject
    >;

    "NetworkFeeUpdated(uint256,uint256)": TypedContractEvent<
      NetworkFeeUpdatedEvent.InputTuple,
      NetworkFeeUpdatedEvent.OutputTuple,
      NetworkFeeUpdatedEvent.OutputObject
    >;
    NetworkFeeUpdated: TypedContractEvent<
      NetworkFeeUpdatedEvent.InputTuple,
      NetworkFeeUpdatedEvent.OutputTuple,
      NetworkFeeUpdatedEvent.OutputObject
    >;

    "OperatorAdded(uint64,address,bytes,uint256)": TypedContractEvent<
      OperatorAddedEvent.InputTuple,
      OperatorAddedEvent.OutputTuple,
      OperatorAddedEvent.OutputObject
    >;
    OperatorAdded: TypedContractEvent<
      OperatorAddedEvent.InputTuple,
      OperatorAddedEvent.OutputTuple,
      OperatorAddedEvent.OutputObject
    >;

    "OperatorFeeDeclarationCancelled(address,uint64)": TypedContractEvent<
      OperatorFeeDeclarationCancelledEvent.InputTuple,
      OperatorFeeDeclarationCancelledEvent.OutputTuple,
      OperatorFeeDeclarationCancelledEvent.OutputObject
    >;
    OperatorFeeDeclarationCancelled: TypedContractEvent<
      OperatorFeeDeclarationCancelledEvent.InputTuple,
      OperatorFeeDeclarationCancelledEvent.OutputTuple,
      OperatorFeeDeclarationCancelledEvent.OutputObject
    >;

    "OperatorFeeDeclared(address,uint64,uint256,uint256)": TypedContractEvent<
      OperatorFeeDeclaredEvent.InputTuple,
      OperatorFeeDeclaredEvent.OutputTuple,
      OperatorFeeDeclaredEvent.OutputObject
    >;
    OperatorFeeDeclared: TypedContractEvent<
      OperatorFeeDeclaredEvent.InputTuple,
      OperatorFeeDeclaredEvent.OutputTuple,
      OperatorFeeDeclaredEvent.OutputObject
    >;

    "OperatorFeeExecuted(address,uint64,uint256,uint256)": TypedContractEvent<
      OperatorFeeExecutedEvent.InputTuple,
      OperatorFeeExecutedEvent.OutputTuple,
      OperatorFeeExecutedEvent.OutputObject
    >;
    OperatorFeeExecuted: TypedContractEvent<
      OperatorFeeExecutedEvent.InputTuple,
      OperatorFeeExecutedEvent.OutputTuple,
      OperatorFeeExecutedEvent.OutputObject
    >;

    "OperatorFeeIncreaseLimitUpdated(uint64)": TypedContractEvent<
      OperatorFeeIncreaseLimitUpdatedEvent.InputTuple,
      OperatorFeeIncreaseLimitUpdatedEvent.OutputTuple,
      OperatorFeeIncreaseLimitUpdatedEvent.OutputObject
    >;
    OperatorFeeIncreaseLimitUpdated: TypedContractEvent<
      OperatorFeeIncreaseLimitUpdatedEvent.InputTuple,
      OperatorFeeIncreaseLimitUpdatedEvent.OutputTuple,
      OperatorFeeIncreaseLimitUpdatedEvent.OutputObject
    >;

    "OperatorMaximumFeeUpdated(uint64)": TypedContractEvent<
      OperatorMaximumFeeUpdatedEvent.InputTuple,
      OperatorMaximumFeeUpdatedEvent.OutputTuple,
      OperatorMaximumFeeUpdatedEvent.OutputObject
    >;
    OperatorMaximumFeeUpdated: TypedContractEvent<
      OperatorMaximumFeeUpdatedEvent.InputTuple,
      OperatorMaximumFeeUpdatedEvent.OutputTuple,
      OperatorMaximumFeeUpdatedEvent.OutputObject
    >;

    "OperatorMultipleWhitelistRemoved(uint64[],address[])": TypedContractEvent<
      OperatorMultipleWhitelistRemovedEvent.InputTuple,
      OperatorMultipleWhitelistRemovedEvent.OutputTuple,
      OperatorMultipleWhitelistRemovedEvent.OutputObject
    >;
    OperatorMultipleWhitelistRemoved: TypedContractEvent<
      OperatorMultipleWhitelistRemovedEvent.InputTuple,
      OperatorMultipleWhitelistRemovedEvent.OutputTuple,
      OperatorMultipleWhitelistRemovedEvent.OutputObject
    >;

    "OperatorMultipleWhitelistUpdated(uint64[],address[])": TypedContractEvent<
      OperatorMultipleWhitelistUpdatedEvent.InputTuple,
      OperatorMultipleWhitelistUpdatedEvent.OutputTuple,
      OperatorMultipleWhitelistUpdatedEvent.OutputObject
    >;
    OperatorMultipleWhitelistUpdated: TypedContractEvent<
      OperatorMultipleWhitelistUpdatedEvent.InputTuple,
      OperatorMultipleWhitelistUpdatedEvent.OutputTuple,
      OperatorMultipleWhitelistUpdatedEvent.OutputObject
    >;

    "OperatorPrivacyStatusUpdated(uint64[],bool)": TypedContractEvent<
      OperatorPrivacyStatusUpdatedEvent.InputTuple,
      OperatorPrivacyStatusUpdatedEvent.OutputTuple,
      OperatorPrivacyStatusUpdatedEvent.OutputObject
    >;
    OperatorPrivacyStatusUpdated: TypedContractEvent<
      OperatorPrivacyStatusUpdatedEvent.InputTuple,
      OperatorPrivacyStatusUpdatedEvent.OutputTuple,
      OperatorPrivacyStatusUpdatedEvent.OutputObject
    >;

    "OperatorRemoved(uint64)": TypedContractEvent<
      OperatorRemovedEvent.InputTuple,
      OperatorRemovedEvent.OutputTuple,
      OperatorRemovedEvent.OutputObject
    >;
    OperatorRemoved: TypedContractEvent<
      OperatorRemovedEvent.InputTuple,
      OperatorRemovedEvent.OutputTuple,
      OperatorRemovedEvent.OutputObject
    >;

    "OperatorWhitelistingContractUpdated(uint64[],address)": TypedContractEvent<
      OperatorWhitelistingContractUpdatedEvent.InputTuple,
      OperatorWhitelistingContractUpdatedEvent.OutputTuple,
      OperatorWhitelistingContractUpdatedEvent.OutputObject
    >;
    OperatorWhitelistingContractUpdated: TypedContractEvent<
      OperatorWhitelistingContractUpdatedEvent.InputTuple,
      OperatorWhitelistingContractUpdatedEvent.OutputTuple,
      OperatorWhitelistingContractUpdatedEvent.OutputObject
    >;

    "OperatorWithdrawn(address,uint64,uint256)": TypedContractEvent<
      OperatorWithdrawnEvent.InputTuple,
      OperatorWithdrawnEvent.OutputTuple,
      OperatorWithdrawnEvent.OutputObject
    >;
    OperatorWithdrawn: TypedContractEvent<
      OperatorWithdrawnEvent.InputTuple,
      OperatorWithdrawnEvent.OutputTuple,
      OperatorWithdrawnEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;

    "ValidatorAdded(address,uint64[],bytes,bytes,tuple)": TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;
    ValidatorAdded: TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;

    "ValidatorExited(address,uint64[],bytes)": TypedContractEvent<
      ValidatorExitedEvent.InputTuple,
      ValidatorExitedEvent.OutputTuple,
      ValidatorExitedEvent.OutputObject
    >;
    ValidatorExited: TypedContractEvent<
      ValidatorExitedEvent.InputTuple,
      ValidatorExitedEvent.OutputTuple,
      ValidatorExitedEvent.OutputObject
    >;

    "ValidatorRemoved(address,uint64[],bytes,tuple)": TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
    ValidatorRemoved: TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
  };
}
