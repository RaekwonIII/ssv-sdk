/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace ISSVNetworkCore {
  export type ClusterStruct = {
    validatorCount: BigNumberish;
    networkFeeIndex: BigNumberish;
    index: BigNumberish;
    active: boolean;
    balance: BigNumberish;
  };

  export type ClusterStructOutput = [
    validatorCount: bigint,
    networkFeeIndex: bigint,
    index: bigint,
    active: boolean,
    balance: bigint
  ] & {
    validatorCount: bigint;
    networkFeeIndex: bigint;
    index: bigint;
    active: boolean;
    balance: bigint;
  };
}

export interface SSVNetworkViewsInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "acceptOwnership"
      | "getBalance"
      | "getBurnRate"
      | "getLiquidationThresholdPeriod"
      | "getMaximumOperatorFee"
      | "getMinimumLiquidationCollateral"
      | "getNetworkEarnings"
      | "getNetworkFee"
      | "getNetworkValidatorsCount"
      | "getOperatorById"
      | "getOperatorDeclaredFee"
      | "getOperatorEarnings"
      | "getOperatorFee"
      | "getOperatorFeeIncreaseLimit"
      | "getOperatorFeePeriods"
      | "getValidator"
      | "getValidatorsPerOperatorLimit"
      | "getVersion"
      | "getWhitelistedOperators"
      | "initialize"
      | "isAddressWhitelistedInWhitelistingContract"
      | "isLiquidatable"
      | "isLiquidated"
      | "isWhitelistingContract"
      | "owner"
      | "pendingOwner"
      | "proxiableUUID"
      | "renounceOwnership"
      | "ssvNetwork"
      | "transferOwnership"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "AdminChanged"
      | "BeaconUpgraded"
      | "Initialized"
      | "OwnershipTransferStarted"
      | "OwnershipTransferred"
      | "Upgraded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "acceptOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getBalance",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getBurnRate",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getLiquidationThresholdPeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMaximumOperatorFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getMinimumLiquidationCollateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkEarnings",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkFee",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getNetworkValidatorsCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorById",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorDeclaredFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorEarnings",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorFeeIncreaseLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getOperatorFeePeriods",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getValidator",
    values: [AddressLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getValidatorsPerOperatorLimit",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getWhitelistedOperators",
    values: [BigNumberish[], AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isAddressWhitelistedInWhitelistingContract",
    values: [AddressLike, BigNumberish, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidatable",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isLiquidated",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "isWhitelistingContract",
    values: [AddressLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ssvNetwork",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [AddressLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "acceptOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getBalance", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getBurnRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLiquidationThresholdPeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMaximumOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getMinimumLiquidationCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getNetworkValidatorsCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorById",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorDeclaredFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorEarnings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorFee",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorFeeIncreaseLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getOperatorFeePeriods",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValidatorsPerOperatorLimit",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getVersion", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWhitelistedOperators",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAddressWhitelistedInWhitelistingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidatable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isLiquidated",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isWhitelistingContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ssvNetwork", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;
}

export namespace AdminChangedEvent {
  export type InputTuple = [previousAdmin: AddressLike, newAdmin: AddressLike];
  export type OutputTuple = [previousAdmin: string, newAdmin: string];
  export interface OutputObject {
    previousAdmin: string;
    newAdmin: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BeaconUpgradedEvent {
  export type InputTuple = [beacon: AddressLike];
  export type OutputTuple = [beacon: string];
  export interface OutputObject {
    beacon: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferStartedEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace UpgradedEvent {
  export type InputTuple = [implementation: AddressLike];
  export type OutputTuple = [implementation: string];
  export interface OutputObject {
    implementation: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SSVNetworkViews extends BaseContract {
  connect(runner?: ContractRunner | null): SSVNetworkViews;
  waitForDeployment(): Promise<this>;

  interface: SSVNetworkViewsInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  acceptOwnership: TypedContractMethod<[], [void], "nonpayable">;

  getBalance: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [bigint],
    "view"
  >;

  getBurnRate: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [bigint],
    "view"
  >;

  getLiquidationThresholdPeriod: TypedContractMethod<[], [bigint], "view">;

  getMaximumOperatorFee: TypedContractMethod<[], [bigint], "view">;

  getMinimumLiquidationCollateral: TypedContractMethod<[], [bigint], "view">;

  getNetworkEarnings: TypedContractMethod<[], [bigint], "view">;

  getNetworkFee: TypedContractMethod<[], [bigint], "view">;

  getNetworkValidatorsCount: TypedContractMethod<[], [bigint], "view">;

  getOperatorById: TypedContractMethod<
    [operatorId: BigNumberish],
    [[string, bigint, bigint, string, boolean, boolean]],
    "view"
  >;

  getOperatorDeclaredFee: TypedContractMethod<
    [operatorId: BigNumberish],
    [[boolean, bigint, bigint, bigint]],
    "view"
  >;

  getOperatorEarnings: TypedContractMethod<
    [id: BigNumberish],
    [bigint],
    "view"
  >;

  getOperatorFee: TypedContractMethod<
    [operatorId: BigNumberish],
    [bigint],
    "view"
  >;

  getOperatorFeeIncreaseLimit: TypedContractMethod<[], [bigint], "view">;

  getOperatorFeePeriods: TypedContractMethod<[], [[bigint, bigint]], "view">;

  getValidator: TypedContractMethod<
    [clusterOwner: AddressLike, publicKey: BytesLike],
    [boolean],
    "view"
  >;

  getValidatorsPerOperatorLimit: TypedContractMethod<[], [bigint], "view">;

  getVersion: TypedContractMethod<[], [string], "view">;

  getWhitelistedOperators: TypedContractMethod<
    [operatorIds: BigNumberish[], whitelistedAddress: AddressLike],
    [bigint[]],
    "view"
  >;

  initialize: TypedContractMethod<
    [ssvNetwork_: AddressLike],
    [void],
    "nonpayable"
  >;

  isAddressWhitelistedInWhitelistingContract: TypedContractMethod<
    [
      addressToCheck: AddressLike,
      operatorId: BigNumberish,
      whitelistingContract: AddressLike
    ],
    [boolean],
    "view"
  >;

  isLiquidatable: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [boolean],
    "view"
  >;

  isLiquidated: TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [boolean],
    "view"
  >;

  isWhitelistingContract: TypedContractMethod<
    [contractAddress: AddressLike],
    [boolean],
    "view"
  >;

  owner: TypedContractMethod<[], [string], "view">;

  pendingOwner: TypedContractMethod<[], [string], "view">;

  proxiableUUID: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  ssvNetwork: TypedContractMethod<[], [string], "view">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeTo: TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;

  upgradeToAndCall: TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "acceptOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getBalance"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getBurnRate"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLiquidationThresholdPeriod"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMaximumOperatorFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getMinimumLiquidationCollateral"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNetworkEarnings"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNetworkFee"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getNetworkValidatorsCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorById"
  ): TypedContractMethod<
    [operatorId: BigNumberish],
    [[string, bigint, bigint, string, boolean, boolean]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperatorDeclaredFee"
  ): TypedContractMethod<
    [operatorId: BigNumberish],
    [[boolean, bigint, bigint, bigint]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getOperatorEarnings"
  ): TypedContractMethod<[id: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorFee"
  ): TypedContractMethod<[operatorId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorFeeIncreaseLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getOperatorFeePeriods"
  ): TypedContractMethod<[], [[bigint, bigint]], "view">;
  getFunction(
    nameOrSignature: "getValidator"
  ): TypedContractMethod<
    [clusterOwner: AddressLike, publicKey: BytesLike],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "getValidatorsPerOperatorLimit"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getVersion"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getWhitelistedOperators"
  ): TypedContractMethod<
    [operatorIds: BigNumberish[], whitelistedAddress: AddressLike],
    [bigint[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<[ssvNetwork_: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "isAddressWhitelistedInWhitelistingContract"
  ): TypedContractMethod<
    [
      addressToCheck: AddressLike,
      operatorId: BigNumberish,
      whitelistingContract: AddressLike
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLiquidatable"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isLiquidated"
  ): TypedContractMethod<
    [
      clusterOwner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [boolean],
    "view"
  >;
  getFunction(
    nameOrSignature: "isWhitelistingContract"
  ): TypedContractMethod<[contractAddress: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "pendingOwner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "proxiableUUID"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "ssvNetwork"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "upgradeTo"
  ): TypedContractMethod<
    [newImplementation: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "upgradeToAndCall"
  ): TypedContractMethod<
    [newImplementation: AddressLike, data: BytesLike],
    [void],
    "payable"
  >;

  getEvent(
    key: "AdminChanged"
  ): TypedContractEvent<
    AdminChangedEvent.InputTuple,
    AdminChangedEvent.OutputTuple,
    AdminChangedEvent.OutputObject
  >;
  getEvent(
    key: "BeaconUpgraded"
  ): TypedContractEvent<
    BeaconUpgradedEvent.InputTuple,
    BeaconUpgradedEvent.OutputTuple,
    BeaconUpgradedEvent.OutputObject
  >;
  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferStarted"
  ): TypedContractEvent<
    OwnershipTransferStartedEvent.InputTuple,
    OwnershipTransferStartedEvent.OutputTuple,
    OwnershipTransferStartedEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "Upgraded"
  ): TypedContractEvent<
    UpgradedEvent.InputTuple,
    UpgradedEvent.OutputTuple,
    UpgradedEvent.OutputObject
  >;

  filters: {
    "AdminChanged(address,address)": TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;
    AdminChanged: TypedContractEvent<
      AdminChangedEvent.InputTuple,
      AdminChangedEvent.OutputTuple,
      AdminChangedEvent.OutputObject
    >;

    "BeaconUpgraded(address)": TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;
    BeaconUpgraded: TypedContractEvent<
      BeaconUpgradedEvent.InputTuple,
      BeaconUpgradedEvent.OutputTuple,
      BeaconUpgradedEvent.OutputObject
    >;

    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnershipTransferStarted(address,address)": TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;
    OwnershipTransferStarted: TypedContractEvent<
      OwnershipTransferStartedEvent.InputTuple,
      OwnershipTransferStartedEvent.OutputTuple,
      OwnershipTransferStartedEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "Upgraded(address)": TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
    Upgraded: TypedContractEvent<
      UpgradedEvent.InputTuple,
      UpgradedEvent.OutputTuple,
      UpgradedEvent.OutputObject
    >;
  };
}
