/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../../common";

export declare namespace ISSVNetworkCore {
  export type ClusterStruct = {
    validatorCount: BigNumberish;
    networkFeeIndex: BigNumberish;
    index: BigNumberish;
    active: boolean;
    balance: BigNumberish;
  };

  export type ClusterStructOutput = [
    validatorCount: bigint,
    networkFeeIndex: bigint,
    index: bigint,
    active: boolean,
    balance: bigint
  ] & {
    validatorCount: bigint;
    networkFeeIndex: bigint;
    index: bigint;
    active: boolean;
    balance: bigint;
  };
}

export interface ISSVClustersInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "bulkExitValidator"
      | "bulkRegisterValidator"
      | "bulkRemoveValidator"
      | "deposit"
      | "exitValidator"
      | "liquidate"
      | "reactivate"
      | "registerValidator"
      | "removeValidator"
      | "withdraw"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "ClusterDeposited"
      | "ClusterLiquidated"
      | "ClusterReactivated"
      | "ClusterWithdrawn"
      | "ValidatorAdded"
      | "ValidatorExited"
      | "ValidatorRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "bulkExitValidator",
    values: [BytesLike[], BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkRegisterValidator",
    values: [
      BytesLike[],
      BigNumberish[],
      BytesLike[],
      BigNumberish,
      ISSVNetworkCore.ClusterStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "bulkRemoveValidator",
    values: [BytesLike[], BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      AddressLike,
      BigNumberish[],
      BigNumberish,
      ISSVNetworkCore.ClusterStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "exitValidator",
    values: [BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [AddressLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "reactivate",
    values: [BigNumberish[], BigNumberish, ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "registerValidator",
    values: [
      BytesLike,
      BigNumberish[],
      BytesLike,
      BigNumberish,
      ISSVNetworkCore.ClusterStruct
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "removeValidator",
    values: [BytesLike, BigNumberish[], ISSVNetworkCore.ClusterStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "withdraw",
    values: [BigNumberish[], BigNumberish, ISSVNetworkCore.ClusterStruct]
  ): string;

  decodeFunctionResult(
    functionFragment: "bulkExitValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkRegisterValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "bulkRemoveValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "exitValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "reactivate", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "registerValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeValidator",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
}

export namespace ClusterDepositedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    value: BigNumberish,
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    value: bigint,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    value: bigint;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterLiquidatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterReactivatedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ClusterWithdrawnEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    value: BigNumberish,
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    value: bigint,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    value: bigint;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorAddedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    publicKey: BytesLike,
    shares: BytesLike,
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    publicKey: string,
    shares: string,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    publicKey: string;
    shares: string;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorExitedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    publicKey: BytesLike
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    publicKey: string
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    publicKey: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ValidatorRemovedEvent {
  export type InputTuple = [
    owner: AddressLike,
    operatorIds: BigNumberish[],
    publicKey: BytesLike,
    cluster: ISSVNetworkCore.ClusterStruct
  ];
  export type OutputTuple = [
    owner: string,
    operatorIds: bigint[],
    publicKey: string,
    cluster: ISSVNetworkCore.ClusterStructOutput
  ];
  export interface OutputObject {
    owner: string;
    operatorIds: bigint[];
    publicKey: string;
    cluster: ISSVNetworkCore.ClusterStructOutput;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ISSVClusters extends BaseContract {
  connect(runner?: ContractRunner | null): ISSVClusters;
  waitForDeployment(): Promise<this>;

  interface: ISSVClustersInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  bulkExitValidator: TypedContractMethod<
    [publicKeys: BytesLike[], operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  bulkRegisterValidator: TypedContractMethod<
    [
      publicKeys: BytesLike[],
      operatorIds: BigNumberish[],
      sharesData: BytesLike[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  bulkRemoveValidator: TypedContractMethod<
    [
      publicKeys: BytesLike[],
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  deposit: TypedContractMethod<
    [
      owner: AddressLike,
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  exitValidator: TypedContractMethod<
    [publicKey: BytesLike, operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;

  liquidate: TypedContractMethod<
    [
      owner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  reactivate: TypedContractMethod<
    [
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  registerValidator: TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      sharesData: BytesLike,
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  removeValidator: TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  withdraw: TypedContractMethod<
    [
      operatorIds: BigNumberish[],
      tokenAmount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "bulkExitValidator"
  ): TypedContractMethod<
    [publicKeys: BytesLike[], operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bulkRegisterValidator"
  ): TypedContractMethod<
    [
      publicKeys: BytesLike[],
      operatorIds: BigNumberish[],
      sharesData: BytesLike[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "bulkRemoveValidator"
  ): TypedContractMethod<
    [
      publicKeys: BytesLike[],
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "exitValidator"
  ): TypedContractMethod<
    [publicKey: BytesLike, operatorIds: BigNumberish[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "liquidate"
  ): TypedContractMethod<
    [
      owner: AddressLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "reactivate"
  ): TypedContractMethod<
    [
      operatorIds: BigNumberish[],
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "registerValidator"
  ): TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      sharesData: BytesLike,
      amount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "removeValidator"
  ): TypedContractMethod<
    [
      publicKey: BytesLike,
      operatorIds: BigNumberish[],
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "withdraw"
  ): TypedContractMethod<
    [
      operatorIds: BigNumberish[],
      tokenAmount: BigNumberish,
      cluster: ISSVNetworkCore.ClusterStruct
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "ClusterDeposited"
  ): TypedContractEvent<
    ClusterDepositedEvent.InputTuple,
    ClusterDepositedEvent.OutputTuple,
    ClusterDepositedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterLiquidated"
  ): TypedContractEvent<
    ClusterLiquidatedEvent.InputTuple,
    ClusterLiquidatedEvent.OutputTuple,
    ClusterLiquidatedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterReactivated"
  ): TypedContractEvent<
    ClusterReactivatedEvent.InputTuple,
    ClusterReactivatedEvent.OutputTuple,
    ClusterReactivatedEvent.OutputObject
  >;
  getEvent(
    key: "ClusterWithdrawn"
  ): TypedContractEvent<
    ClusterWithdrawnEvent.InputTuple,
    ClusterWithdrawnEvent.OutputTuple,
    ClusterWithdrawnEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorAdded"
  ): TypedContractEvent<
    ValidatorAddedEvent.InputTuple,
    ValidatorAddedEvent.OutputTuple,
    ValidatorAddedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorExited"
  ): TypedContractEvent<
    ValidatorExitedEvent.InputTuple,
    ValidatorExitedEvent.OutputTuple,
    ValidatorExitedEvent.OutputObject
  >;
  getEvent(
    key: "ValidatorRemoved"
  ): TypedContractEvent<
    ValidatorRemovedEvent.InputTuple,
    ValidatorRemovedEvent.OutputTuple,
    ValidatorRemovedEvent.OutputObject
  >;

  filters: {
    "ClusterDeposited(address,uint64[],uint256,tuple)": TypedContractEvent<
      ClusterDepositedEvent.InputTuple,
      ClusterDepositedEvent.OutputTuple,
      ClusterDepositedEvent.OutputObject
    >;
    ClusterDeposited: TypedContractEvent<
      ClusterDepositedEvent.InputTuple,
      ClusterDepositedEvent.OutputTuple,
      ClusterDepositedEvent.OutputObject
    >;

    "ClusterLiquidated(address,uint64[],tuple)": TypedContractEvent<
      ClusterLiquidatedEvent.InputTuple,
      ClusterLiquidatedEvent.OutputTuple,
      ClusterLiquidatedEvent.OutputObject
    >;
    ClusterLiquidated: TypedContractEvent<
      ClusterLiquidatedEvent.InputTuple,
      ClusterLiquidatedEvent.OutputTuple,
      ClusterLiquidatedEvent.OutputObject
    >;

    "ClusterReactivated(address,uint64[],tuple)": TypedContractEvent<
      ClusterReactivatedEvent.InputTuple,
      ClusterReactivatedEvent.OutputTuple,
      ClusterReactivatedEvent.OutputObject
    >;
    ClusterReactivated: TypedContractEvent<
      ClusterReactivatedEvent.InputTuple,
      ClusterReactivatedEvent.OutputTuple,
      ClusterReactivatedEvent.OutputObject
    >;

    "ClusterWithdrawn(address,uint64[],uint256,tuple)": TypedContractEvent<
      ClusterWithdrawnEvent.InputTuple,
      ClusterWithdrawnEvent.OutputTuple,
      ClusterWithdrawnEvent.OutputObject
    >;
    ClusterWithdrawn: TypedContractEvent<
      ClusterWithdrawnEvent.InputTuple,
      ClusterWithdrawnEvent.OutputTuple,
      ClusterWithdrawnEvent.OutputObject
    >;

    "ValidatorAdded(address,uint64[],bytes,bytes,tuple)": TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;
    ValidatorAdded: TypedContractEvent<
      ValidatorAddedEvent.InputTuple,
      ValidatorAddedEvent.OutputTuple,
      ValidatorAddedEvent.OutputObject
    >;

    "ValidatorExited(address,uint64[],bytes)": TypedContractEvent<
      ValidatorExitedEvent.InputTuple,
      ValidatorExitedEvent.OutputTuple,
      ValidatorExitedEvent.OutputObject
    >;
    ValidatorExited: TypedContractEvent<
      ValidatorExitedEvent.InputTuple,
      ValidatorExitedEvent.OutputTuple,
      ValidatorExitedEvent.OutputObject
    >;

    "ValidatorRemoved(address,uint64[],bytes,tuple)": TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
    ValidatorRemoved: TypedContractEvent<
      ValidatorRemovedEvent.InputTuple,
      ValidatorRemovedEvent.OutputTuple,
      ValidatorRemovedEvent.OutputObject
    >;
  };
}
