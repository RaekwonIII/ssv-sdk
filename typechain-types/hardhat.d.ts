/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  DeployContractOptions,
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomicfoundation/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "Ownable2StepUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable2StepUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1967Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Initializable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContextUpgradeable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "ISSVWhitelistingContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVWhitelistingContract__factory>;
    getContractFactory(
      name: "ISSVClusters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVClusters__factory>;
    getContractFactory(
      name: "ISSVDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVDAO__factory>;
    getContractFactory(
      name: "ISSVNetwork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVNetwork__factory>;
    getContractFactory(
      name: "ISSVNetworkCore",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVNetworkCore__factory>;
    getContractFactory(
      name: "ISSVOperators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVOperators__factory>;
    getContractFactory(
      name: "ISSVOperatorsWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVOperatorsWhitelist__factory>;
    getContractFactory(
      name: "ISSVViews",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVViews__factory>;
    getContractFactory(
      name: "CoreLib",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CoreLib__factory>;
    getContractFactory(
      name: "SSVClusters",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVClusters__factory>;
    getContractFactory(
      name: "SSVDAO",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVDAO__factory>;
    getContractFactory(
      name: "SSVOperators",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVOperators__factory>;
    getContractFactory(
      name: "SSVOperatorsWhitelist",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVOperatorsWhitelist__factory>;
    getContractFactory(
      name: "SSVViews",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVViews__factory>;
    getContractFactory(
      name: "SSVNetwork",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVNetwork__factory>;
    getContractFactory(
      name: "SSVNetworkViews",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVNetworkViews__factory>;
    getContractFactory(
      name: "ISSVNetworkT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISSVNetworkT__factory>;
    getContractFactory(
      name: "SSVStorageT",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVStorageT__factory>;
    getContractFactory(
      name: "AttackerContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AttackerContract__factory>;
    getContractFactory(
      name: "BadOperatorWhitelistingContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BadOperatorWhitelistingContract__factory>;
    getContractFactory(
      name: "BeneficiaryContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeneficiaryContract__factory>;
    getContractFactory(
      name: "FakeWhitelistingContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.FakeWhitelistingContract__factory>;
    getContractFactory(
      name: "GenericWhitelistContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GenericWhitelistContract__factory>;
    getContractFactory(
      name: "MockWhitelistingContract",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockWhitelistingContract__factory>;
    getContractFactory(
      name: "SSVOperatorsUpdate",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVOperatorsUpdate__factory>;
    getContractFactory(
      name: "SSVNetworkBasicUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVNetworkBasicUpgrade__factory>;
    getContractFactory(
      name: "SSVNetworkReinitializable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVNetworkReinitializable__factory>;
    getContractFactory(
      name: "SSVNetworkUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVNetworkUpgrade__factory>;
    getContractFactory(
      name: "SSVNetworkValidatorsPerOperatorUpgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVNetworkValidatorsPerOperatorUpgrade__factory>;
    getContractFactory(
      name: "SSVToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVToken__factory>;
    getContractFactory(
      name: "SSVNetworkValidatorsPerOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVNetworkValidatorsPerOperator__factory>;
    getContractFactory(
      name: "SSVNetworkUpgradeValidatorsPerOperator",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SSVNetworkUpgradeValidatorsPerOperator__factory>;
    getContractFactory(
      name: "BasicWhitelisting",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicWhitelisting__factory>;

    getContractAt(
      name: "Ownable2StepUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable2StepUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC1967Upgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1967Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "Initializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Initializable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "ContextUpgradeable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ContextUpgradeable>;
    getContractAt(
      name: "Ownable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "ISSVWhitelistingContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVWhitelistingContract>;
    getContractAt(
      name: "ISSVClusters",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVClusters>;
    getContractAt(
      name: "ISSVDAO",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVDAO>;
    getContractAt(
      name: "ISSVNetwork",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVNetwork>;
    getContractAt(
      name: "ISSVNetworkCore",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVNetworkCore>;
    getContractAt(
      name: "ISSVOperators",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVOperators>;
    getContractAt(
      name: "ISSVOperatorsWhitelist",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVOperatorsWhitelist>;
    getContractAt(
      name: "ISSVViews",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVViews>;
    getContractAt(
      name: "CoreLib",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.CoreLib>;
    getContractAt(
      name: "SSVClusters",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVClusters>;
    getContractAt(
      name: "SSVDAO",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVDAO>;
    getContractAt(
      name: "SSVOperators",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVOperators>;
    getContractAt(
      name: "SSVOperatorsWhitelist",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVOperatorsWhitelist>;
    getContractAt(
      name: "SSVViews",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVViews>;
    getContractAt(
      name: "SSVNetwork",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVNetwork>;
    getContractAt(
      name: "SSVNetworkViews",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVNetworkViews>;
    getContractAt(
      name: "ISSVNetworkT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.ISSVNetworkT>;
    getContractAt(
      name: "SSVStorageT",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVStorageT>;
    getContractAt(
      name: "AttackerContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.AttackerContract>;
    getContractAt(
      name: "BadOperatorWhitelistingContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BadOperatorWhitelistingContract>;
    getContractAt(
      name: "BeneficiaryContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BeneficiaryContract>;
    getContractAt(
      name: "FakeWhitelistingContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.FakeWhitelistingContract>;
    getContractAt(
      name: "GenericWhitelistContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.GenericWhitelistContract>;
    getContractAt(
      name: "MockWhitelistingContract",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.MockWhitelistingContract>;
    getContractAt(
      name: "SSVOperatorsUpdate",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVOperatorsUpdate>;
    getContractAt(
      name: "SSVNetworkBasicUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVNetworkBasicUpgrade>;
    getContractAt(
      name: "SSVNetworkReinitializable",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVNetworkReinitializable>;
    getContractAt(
      name: "SSVNetworkUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVNetworkUpgrade>;
    getContractAt(
      name: "SSVNetworkValidatorsPerOperatorUpgrade",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVNetworkValidatorsPerOperatorUpgrade>;
    getContractAt(
      name: "SSVToken",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVToken>;
    getContractAt(
      name: "SSVNetworkValidatorsPerOperator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVNetworkValidatorsPerOperator>;
    getContractAt(
      name: "SSVNetworkUpgradeValidatorsPerOperator",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.SSVNetworkUpgradeValidatorsPerOperator>;
    getContractAt(
      name: "BasicWhitelisting",
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicWhitelisting>;

    deployContract(
      name: "Ownable2StepUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2StepUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    deployContract(
      name: "IERC1967Upgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1967Upgradeable>;
    deployContract(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeaconUpgradeable>;
    deployContract(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    deployContract(
      name: "Initializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ISSVWhitelistingContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVWhitelistingContract>;
    deployContract(
      name: "ISSVClusters",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVClusters>;
    deployContract(
      name: "ISSVDAO",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVDAO>;
    deployContract(
      name: "ISSVNetwork",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVNetwork>;
    deployContract(
      name: "ISSVNetworkCore",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVNetworkCore>;
    deployContract(
      name: "ISSVOperators",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVOperators>;
    deployContract(
      name: "ISSVOperatorsWhitelist",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVOperatorsWhitelist>;
    deployContract(
      name: "ISSVViews",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVViews>;
    deployContract(
      name: "CoreLib",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CoreLib>;
    deployContract(
      name: "SSVClusters",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVClusters>;
    deployContract(
      name: "SSVDAO",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVDAO>;
    deployContract(
      name: "SSVOperators",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVOperators>;
    deployContract(
      name: "SSVOperatorsWhitelist",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVOperatorsWhitelist>;
    deployContract(
      name: "SSVViews",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVViews>;
    deployContract(
      name: "SSVNetwork",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetwork>;
    deployContract(
      name: "SSVNetworkViews",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkViews>;
    deployContract(
      name: "ISSVNetworkT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVNetworkT>;
    deployContract(
      name: "SSVStorageT",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVStorageT>;
    deployContract(
      name: "AttackerContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AttackerContract>;
    deployContract(
      name: "BadOperatorWhitelistingContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BadOperatorWhitelistingContract>;
    deployContract(
      name: "BeneficiaryContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeneficiaryContract>;
    deployContract(
      name: "FakeWhitelistingContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FakeWhitelistingContract>;
    deployContract(
      name: "GenericWhitelistContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GenericWhitelistContract>;
    deployContract(
      name: "MockWhitelistingContract",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockWhitelistingContract>;
    deployContract(
      name: "SSVOperatorsUpdate",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVOperatorsUpdate>;
    deployContract(
      name: "SSVNetworkBasicUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkBasicUpgrade>;
    deployContract(
      name: "SSVNetworkReinitializable",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkReinitializable>;
    deployContract(
      name: "SSVNetworkUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkUpgrade>;
    deployContract(
      name: "SSVNetworkValidatorsPerOperatorUpgrade",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkValidatorsPerOperatorUpgrade>;
    deployContract(
      name: "SSVToken",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVToken>;
    deployContract(
      name: "SSVNetworkValidatorsPerOperator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkValidatorsPerOperator>;
    deployContract(
      name: "SSVNetworkUpgradeValidatorsPerOperator",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkUpgradeValidatorsPerOperator>;
    deployContract(
      name: "BasicWhitelisting",
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicWhitelisting>;

    deployContract(
      name: "Ownable2StepUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable2StepUpgradeable>;
    deployContract(
      name: "OwnableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.OwnableUpgradeable>;
    deployContract(
      name: "IERC1822ProxiableUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    deployContract(
      name: "IERC1967Upgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC1967Upgradeable>;
    deployContract(
      name: "IBeaconUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IBeaconUpgradeable>;
    deployContract(
      name: "ERC1967UpgradeUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    deployContract(
      name: "Initializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Initializable>;
    deployContract(
      name: "UUPSUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.UUPSUpgradeable>;
    deployContract(
      name: "ContextUpgradeable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ContextUpgradeable>;
    deployContract(
      name: "Ownable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.Ownable>;
    deployContract(
      name: "ERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20>;
    deployContract(
      name: "ERC20Burnable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC20Burnable>;
    deployContract(
      name: "IERC20Metadata",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20Metadata>;
    deployContract(
      name: "IERC20",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC20>;
    deployContract(
      name: "ERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ERC165>;
    deployContract(
      name: "IERC165",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.IERC165>;
    deployContract(
      name: "ISSVWhitelistingContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVWhitelistingContract>;
    deployContract(
      name: "ISSVClusters",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVClusters>;
    deployContract(
      name: "ISSVDAO",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVDAO>;
    deployContract(
      name: "ISSVNetwork",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVNetwork>;
    deployContract(
      name: "ISSVNetworkCore",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVNetworkCore>;
    deployContract(
      name: "ISSVOperators",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVOperators>;
    deployContract(
      name: "ISSVOperatorsWhitelist",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVOperatorsWhitelist>;
    deployContract(
      name: "ISSVViews",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVViews>;
    deployContract(
      name: "CoreLib",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.CoreLib>;
    deployContract(
      name: "SSVClusters",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVClusters>;
    deployContract(
      name: "SSVDAO",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVDAO>;
    deployContract(
      name: "SSVOperators",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVOperators>;
    deployContract(
      name: "SSVOperatorsWhitelist",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVOperatorsWhitelist>;
    deployContract(
      name: "SSVViews",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVViews>;
    deployContract(
      name: "SSVNetwork",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetwork>;
    deployContract(
      name: "SSVNetworkViews",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkViews>;
    deployContract(
      name: "ISSVNetworkT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.ISSVNetworkT>;
    deployContract(
      name: "SSVStorageT",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVStorageT>;
    deployContract(
      name: "AttackerContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.AttackerContract>;
    deployContract(
      name: "BadOperatorWhitelistingContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BadOperatorWhitelistingContract>;
    deployContract(
      name: "BeneficiaryContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BeneficiaryContract>;
    deployContract(
      name: "FakeWhitelistingContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.FakeWhitelistingContract>;
    deployContract(
      name: "GenericWhitelistContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.GenericWhitelistContract>;
    deployContract(
      name: "MockWhitelistingContract",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.MockWhitelistingContract>;
    deployContract(
      name: "SSVOperatorsUpdate",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVOperatorsUpdate>;
    deployContract(
      name: "SSVNetworkBasicUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkBasicUpgrade>;
    deployContract(
      name: "SSVNetworkReinitializable",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkReinitializable>;
    deployContract(
      name: "SSVNetworkUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkUpgrade>;
    deployContract(
      name: "SSVNetworkValidatorsPerOperatorUpgrade",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkValidatorsPerOperatorUpgrade>;
    deployContract(
      name: "SSVToken",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVToken>;
    deployContract(
      name: "SSVNetworkValidatorsPerOperator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkValidatorsPerOperator>;
    deployContract(
      name: "SSVNetworkUpgradeValidatorsPerOperator",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.SSVNetworkUpgradeValidatorsPerOperator>;
    deployContract(
      name: "BasicWhitelisting",
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<Contracts.BasicWhitelisting>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string | ethers.Addressable,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
    deployContract(
      name: string,
      args: any[],
      signerOrOptions?: ethers.Signer | DeployContractOptions
    ): Promise<ethers.Contract>;
  }
}
