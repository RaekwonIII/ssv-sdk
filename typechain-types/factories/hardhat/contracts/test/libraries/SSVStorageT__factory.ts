/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  SSVStorageT,
  SSVStorageTInterface,
} from "../../../../../hardhat/contracts/test/libraries/SSVStorageT";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "enum SSVModules",
        name: "moduleId",
        type: "uint8",
      },
      {
        indexed: false,
        internalType: "address",
        name: "moduleAddress",
        type: "address",
      },
    ],
    name: "ModuleUpgraded",
    type: "event",
  },
] as const;

const _bytecode =
  "0x60556032600b8282823980515f1a607314602657634e487b7160e01b5f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f80fdfea2646970667358221220b0bd13e6f093bbcbbd520eb2666fe6ec2fbfc9850997019e2933eb22502e856664736f6c63430008180033";

type SSVStorageTConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SSVStorageTConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SSVStorageT__factory extends ContractFactory {
  constructor(...args: SSVStorageTConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      SSVStorageT & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): SSVStorageT__factory {
    return super.connect(runner) as SSVStorageT__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SSVStorageTInterface {
    return new Interface(_abi) as SSVStorageTInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): SSVStorageT {
    return new Contract(address, _abi, runner) as unknown as SSVStorageT;
  }
}
