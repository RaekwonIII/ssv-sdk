/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Contract,
  ContractFactory,
  ContractTransactionResponse,
  Interface,
} from "ethers";
import type {
  Signer,
  AddressLike,
  ContractDeployTransaction,
  ContractRunner,
} from "ethers";
import type { NonPayableOverrides } from "../../../../../common";
import type {
  BadOperatorWhitelistingContract,
  BadOperatorWhitelistingContractInterface,
} from "../../../../../hardhat/contracts/test/mocks/BadOperatorWhitelistingContract";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract BeneficiaryContract",
        name: "_beneficiaryContract",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    stateMutability: "nonpayable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561000f575f80fd5b5060405161031138038061031183398101604081905261002e91610052565b5f80546001600160a01b0319166001600160a01b039290921691909117905561007f565b5f60208284031215610062575f80fd5b81516001600160a01b0381168114610078575f80fd5b9392505050565b6102858061008c5f395ff3fe608060405234801561000f575f80fd5b5060043610610029575f3560e01c806301ffc9a714610102575b5f61003436826101c1565b90507f7cf9c654000000000000000000000000000000000000000000000000000000007fffffffff00000000000000000000000000000000000000000000000000000000821601610100575f546040517f42e3318400000000000000000000000000000000000000000000000000000000815262989680600482015273ffffffffffffffffffffffffffffffffffffffff909116906342e33184906024015f604051808303815f87803b1580156100e9575f80fd5b505af11580156100fb573d5f803e3d5ffd5b505050505b005b610115610110366004610209565b610129565b604051901515815260200160405180910390f35b5f7fffffffff0000000000000000000000000000000000000000000000000000000082167f830639ac0000000000000000000000000000000000000000000000000000000014806101bb57507f01ffc9a7000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008316145b92915050565b7fffffffff0000000000000000000000000000000000000000000000000000000081358181169160048510156102015780818660040360031b1b83161692505b505092915050565b5f60208284031215610219575f80fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114610248575f80fd5b939250505056fea2646970667358221220432485f4a6ae016e8871db0342e48eb36061c548bde399df47c1f177ada9808c64736f6c63430008180033";

type BadOperatorWhitelistingContractConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: BadOperatorWhitelistingContractConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class BadOperatorWhitelistingContract__factory extends ContractFactory {
  constructor(...args: BadOperatorWhitelistingContractConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(
    _beneficiaryContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(_beneficiaryContract, overrides || {});
  }
  override deploy(
    _beneficiaryContract: AddressLike,
    overrides?: NonPayableOverrides & { from?: string }
  ) {
    return super.deploy(_beneficiaryContract, overrides || {}) as Promise<
      BadOperatorWhitelistingContract & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(
    runner: ContractRunner | null
  ): BadOperatorWhitelistingContract__factory {
    return super.connect(runner) as BadOperatorWhitelistingContract__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): BadOperatorWhitelistingContractInterface {
    return new Interface(_abi) as BadOperatorWhitelistingContractInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): BadOperatorWhitelistingContract {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as BadOperatorWhitelistingContract;
  }
}
